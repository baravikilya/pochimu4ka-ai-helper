import React, { useState, useEffect } from 'react';
import { useToast } from '@/hooks/use-toast';
import Header from '@/components/Header';
import QuestionForm from '@/components/QuestionForm';
import AuthModal from '@/components/AuthModals';
import HistoryModal from '@/components/HistoryModal';

// Mock interfaces for now - will be replaced with Supabase integration
interface User {
  id: string;
  username: string;
}

interface Query {
  id: number;
  question_text: string;
  difficulty_level: string;
  answer_text: string;
  created_at: string;
}

const Index = () => {
  const { toast } = useToast();
  
  // Auth state
  const [user, setUser] = useState<User | null>(null);
  const [isLoginOpen, setIsLoginOpen] = useState(false);
  const [isRegisterOpen, setIsRegisterOpen] = useState(false);
  const [authLoading, setAuthLoading] = useState(false);
  const [authError, setAuthError] = useState<string | null>(null);
  
  // Question state
  const [questionLoading, setQuestionLoading] = useState(false);
  const [answer, setAnswer] = useState<string | null>(null);
  
  // History state
  const [isHistoryOpen, setIsHistoryOpen] = useState(false);
  const [queries, setQueries] = useState<Query[]>([]);
  const [historyLoading, setHistoryLoading] = useState(false);

  // Mock authentication functions (will be replaced with Supabase)
  const handleLogin = async (username: string, password: string) => {
    setAuthLoading(true);
    setAuthError(null);
    
    try {
      // Mock login delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Mock success
      setUser({ id: '1', username });
      setIsLoginOpen(false);
      toast({
        title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        description: `–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –∫–∞–∫ ${username}`,
      });
    } catch (error) {
      setAuthError('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
    } finally {
      setAuthLoading(false);
    }
  };

  const handleRegister = async (username: string, password: string) => {
    setAuthLoading(true);
    setAuthError(null);
    
    try {
      // Mock registration delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Mock success
      setUser({ id: '1', username });
      setIsRegisterOpen(false);
      toast({
        title: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
        description: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}!`,
      });
    } catch (error) {
      setAuthError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    } finally {
      setAuthLoading(false);
    }
  };

  const handleLogout = () => {
    setUser(null);
    setQueries([]);
    setAnswer(null);
    toast({
      title: '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!',
      description: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã',
    });
  };

  // Question submission
  const handleQuestionSubmit = async (question: string, difficulty: string) => {
    setQuestionLoading(true);
    setAnswer(null);
    
    try {
      // Mock API call to n8n webhook
      const response = await fetch('/api/webhook/pochimuchka', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          question,
          difficulty,
        }),
      });

      if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }

      const data = await response.json();
      setAnswer(data.answer);

      // If user is logged in, save to history (mock)
      if (user) {
        const newQuery: Query = {
          id: Date.now(),
          question_text: question,
          difficulty_level: difficulty,
          answer_text: data.answer,
          created_at: new Date().toISOString(),
        };
        setQueries(prev => [newQuery, ...prev]);
      }

      toast({
        title: '–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!',
        description: '–ù–µ–π—Ä–æ—Å–µ—Ç—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å',
      });
    } catch (error) {
      // Mock response for demo
      const mockAnswer = `–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ä–æ–≤–Ω–µ "${difficulty}" –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: "${question}". 

–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —á–µ—Ä–µ–∑ n8n webhook. 

–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
- –î–ª—è –º–∞–ª—ã—à–µ–π: –ø—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞ –∏ –ø—Ä–∏–º–µ—Ä—ã
- –®–∫–æ–ª—å–Ω–∏–∫: –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
- –°—Ç—É–¥–µ–Ω—Ç: –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–µ–π`;

      setAnswer(mockAnswer);

      // If user is logged in, save to history (mock)
      if (user) {
        const newQuery: Query = {
          id: Date.now(),
          question_text: question,
          difficulty_level: difficulty,
          answer_text: mockAnswer,
          created_at: new Date().toISOString(),
        };
        setQueries(prev => [newQuery, ...prev]);
      }
    } finally {
      setQuestionLoading(false);
    }
  };

  // Load history when opening modal
  const handleOpenHistory = () => {
    setIsHistoryOpen(true);
    // In real app, this would fetch from Supabase
  };

  return (
    <div className="min-h-screen bg-background">
      <Header
        isLoggedIn={!!user}
        username={user?.username}
        onOpenLogin={() => setIsLoginOpen(true)}
        onOpenRegister={() => setIsRegisterOpen(true)}
        onOpenHistory={handleOpenHistory}
        onLogout={handleLogout}
      />

      <main className="container mx-auto px-6 py-12">
        <div className="text-center mb-12">
          <h1 className="text-4xl md:text-5xl font-bold text-foreground mb-4">
            –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ ü§ñ
          </h1>
          <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
            –ü–æ–ª—É—á–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥ —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–Ω–∏–º–∞–Ω–∏—è
          </p>
        </div>

        <QuestionForm
          onSubmit={handleQuestionSubmit}
          isLoading={questionLoading}
          answer={answer}
        />
      </main>

      {/* Auth Modals */}
      <AuthModal
        isOpen={isLoginOpen}
        onClose={() => setIsLoginOpen(false)}
        onSubmit={handleLogin}
        type="login"
        isLoading={authLoading}
        error={authError}
      />

      <AuthModal
        isOpen={isRegisterOpen}
        onClose={() => setIsRegisterOpen(false)}
        onSubmit={handleRegister}
        type="register"
        isLoading={authLoading}
        error={authError}
      />

      {/* History Modal */}
      <HistoryModal
        isOpen={isHistoryOpen}
        onClose={() => setIsHistoryOpen(false)}
        queries={queries}
        isLoading={historyLoading}
      />
    </div>
  );
};

export default Index;
